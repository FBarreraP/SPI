

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Wed Jan 22 14:20:44 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    18                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    19  0000                     
    20                           ; Version 2.10
    21                           ; Generated 31/07/2019 GMT
    22                           ; 
    23                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC18F4550 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     
    55                           	psect	idataCOMRAM
    56  007DDE                     __pidataCOMRAM:
    57                           	opt callstack 0
    58                           
    59                           ;initializer for _a
    60  007DDE  00                 	db	0
    61  007DDF  FE                 	db	254
    62  007DE0  11                 	db	17
    63  007DE1  11                 	db	17
    64  007DE2  11                 	db	17
    65  007DE3  11                 	db	17
    66  007DE4  FE                 	db	254
    67  007DE5  00                 	db	0
    68  0000                     _SSPBUF	set	4041
    69  0000                     _SSPCON1	set	4038
    70  0000                     _SSPSTAT	set	4039
    71  0000                     _LATAbits	set	3977
    72  0000                     _TRISAbits	set	3986
    73  0000                     _TRISCbits	set	3988
    74  0000                     _TRISBbits	set	3987
    75  0000                     _ADCON1	set	4033
    76  0000                     _SSPIF	set	31987
    77                           
    78                           ; #config settings
    79  0000                     
    80                           	psect	cinit
    81  007E62                     __pcinit:
    82                           	opt callstack 0
    83  007E62                     start_initialization:
    84                           	opt callstack 0
    85  007E62                     __initialization:
    86                           	opt callstack 0
    87                           
    88                           ; Initialize objects allocated to COMRAM (8 bytes)
    89                           ; load TBLPTR registers with __pidataCOMRAM
    90  007E62  0EDE               	movlw	low __pidataCOMRAM
    91  007E64  6EF6               	movwf	tblptrl,c
    92  007E66  0E7D               	movlw	high __pidataCOMRAM
    93  007E68  6EF7               	movwf	tblptrh,c
    94  007E6A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
    95  007E6C  6EF8               	movwf	tblptru,c
    96  007E6E  EE00  F00C         	lfsr	0,__pdataCOMRAM
    97  007E72  EE10 F008          	lfsr	1,8
    98  007E76                     copy_data0:
    99  007E76  0009               	tblrd		*+
   100  007E78  CFF5 FFEE          	movff	tablat,postinc0
   101  007E7C  50E5               	movf	postdec1,w,c
   102  007E7E  50E1               	movf	fsr1l,w,c
   103  007E80  E1FA               	bnz	copy_data0
   104                           
   105                           ; Clear objects allocated to COMRAM (7 bytes)
   106  007E82  EE00  F014         	lfsr	0,__pbssCOMRAM
   107  007E86  0E07               	movlw	7
   108  007E88                     clear_0:
   109  007E88  6AEE               	clrf	postinc0,c
   110  007E8A  06E8               	decf	wreg,f,c
   111  007E8C  E1FD               	bnz	clear_0
   112  007E8E                     end_of_initialization:
   113                           	opt callstack 0
   114  007E8E                     __end_of__initialization:
   115                           	opt callstack 0
   116  007E8E  0100               	movlb	0
   117  007E90  EFF3  F03E         	goto	_main	;jump to C main() function
   118                           
   119                           	psect	bssCOMRAM
   120  000014                     __pbssCOMRAM:
   121                           	opt callstack 0
   122  000014                     _byte:
   123                           	opt callstack 0
   124  000014                     	ds	5
   125  000019                     _i:
   126                           	opt callstack 0
   127  000019                     	ds	2
   128                           
   129                           	psect	dataCOMRAM
   130  00000C                     __pdataCOMRAM:
   131                           	opt callstack 0
   132  00000C                     _a:
   133                           	opt callstack 0
   134  00000C                     	ds	8
   135                           
   136                           	psect	cstackCOMRAM
   137  000001                     __pcstackCOMRAM:
   138                           	opt callstack 0
   139  000001                     
   140                           ; 1 bytes @ 0x0
   141  000001                     	ds	1
   142  000002                     SendSPI@Data:
   143                           	opt callstack 0
   144                           
   145                           ; 1 bytes @ 0x1
   146  000002                     	ds	1
   147  000003                     ??_SettingsMAX7219:
   148  000003                     ??_CleanMAX7219:
   149  000003                     WriteSPI@Data:
   150                           	opt callstack 0
   151                           
   152                           ; 2 bytes @ 0x2
   153  000003                     	ds	1
   154  000004                     
   155                           ; 1 bytes @ 0x3
   156  000004                     	ds	1
   157  000005                     WriteSPI@Ndatos:
   158                           	opt callstack 0
   159                           
   160                           ; 2 bytes @ 0x4
   161  000005                     	ds	2
   162  000007                     ??_WriteSPI:
   163                           
   164                           ; 1 bytes @ 0x6
   165  000007                     	ds	2
   166  000009                     WriteSPI@Register:
   167                           	opt callstack 0
   168                           
   169                           ; 1 bytes @ 0x8
   170  000009                     	ds	1
   171  00000A                     ??_start:
   172                           
   173                           ; 1 bytes @ 0x9
   174  00000A                     	ds	2
   175  00000C                     
   176                           ; 1 bytes @ 0xB
   177 ;;
   178 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   179 ;;
   180 ;; *************** function _main *****************
   181 ;; Defined at:
   182 ;;		line 31 in file "main.c"
   183 ;; Parameters:    Size  Location     Type
   184 ;;		None
   185 ;; Auto vars:     Size  Location     Type
   186 ;;		None
   187 ;; Return value:  Size  Location     Type
   188 ;;                  1    wreg      void 
   189 ;; Registers used:
   190 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   191 ;; Tracked objects:
   192 ;;		On entry : 0/0
   193 ;;		On exit  : 0/0
   194 ;;		Unchanged: 0/0
   195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   196 ;;      Params:         0       0       0       0       0       0       0       0       0
   197 ;;      Locals:         0       0       0       0       0       0       0       0       0
   198 ;;      Temps:          0       0       0       0       0       0       0       0       0
   199 ;;      Totals:         0       0       0       0       0       0       0       0       0
   200 ;;Total ram usage:        0 bytes
   201 ;; Hardware stack levels required when called:    3
   202 ;; This function calls:
   203 ;;		_settings
   204 ;;		_start
   205 ;; This function is called by:
   206 ;;		Startup code after reset
   207 ;; This function uses a non-reentrant model
   208 ;;
   209                           
   210                           	psect	text0
   211  007DE6                     __ptext0:
   212                           	opt callstack 0
   213  007DE6                     _main:
   214                           	opt callstack 28
   215  007DE6                     
   216                           ;main.c: 32:     SSPSTAT = 0x40;
   217  007DE6  EC09  F03F         	call	_settings	;wreg free
   218  007DEA                     l912:
   219                           
   220                           ;main.c: 34:     SSPIF = 0;
   221  007DEA  EC1A  F03F         	call	_start	;wreg free
   222  007DEE  EFF5  F03E         	goto	l912
   223  007DF2  EF00  F000         	goto	start
   224  007DF6                     __end_of_main:
   225                           	opt callstack 0
   226                           
   227 ;; *************** function _start *****************
   228 ;; Defined at:
   229 ;;		line 54 in file "main.c"
   230 ;; Parameters:    Size  Location     Type
   231 ;;		None
   232 ;; Auto vars:     Size  Location     Type
   233 ;;		None
   234 ;; Return value:  Size  Location     Type
   235 ;;                  1    wreg      void 
   236 ;; Registers used:
   237 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   238 ;; Tracked objects:
   239 ;;		On entry : 0/0
   240 ;;		On exit  : 0/0
   241 ;;		Unchanged: 0/0
   242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   243 ;;      Params:         0       0       0       0       0       0       0       0       0
   244 ;;      Locals:         0       0       0       0       0       0       0       0       0
   245 ;;      Temps:          2       0       0       0       0       0       0       0       0
   246 ;;      Totals:         2       0       0       0       0       0       0       0       0
   247 ;;Total ram usage:        2 bytes
   248 ;; Hardware stack levels used:    1
   249 ;; Hardware stack levels required when called:    2
   250 ;; This function calls:
   251 ;;		_WriteSPI
   252 ;; This function is called by:
   253 ;;		_main
   254 ;; This function uses a non-reentrant model
   255 ;;
   256                           
   257                           	psect	text1
   258  007E34                     __ptext1:
   259                           	opt callstack 0
   260  007E34                     _start:
   261                           	opt callstack 28
   262  007E34                     
   263                           ;main.c: 55: unsigned char ReceivedSPI(void){
   264  007E34  0E0C               	movlw	low _a
   265  007E36  6E03               	movwf	WriteSPI@Data^0,c
   266  007E38  0E00               	movlw	high _a
   267  007E3A  6E04               	movwf	(WriteSPI@Data+1)^0,c
   268  007E3C  0E00               	movlw	0
   269  007E3E  6E06               	movwf	(WriteSPI@Ndatos+1)^0,c
   270  007E40  0E08               	movlw	8
   271  007E42  6E05               	movwf	WriteSPI@Ndatos^0,c
   272  007E44  0E01               	movlw	1
   273  007E46  EC73  F03F         	call	_WriteSPI
   274  007E4A                     
   275                           ;main.c: 56:     SSPBUF = 0x00;
   276  007E4A  0E03               	movlw	3
   277  007E4C  6E0B               	movwf	(??_start+1)^0,c
   278  007E4E  0E8A               	movlw	138
   279  007E50  6E0A               	movwf	??_start^0,c
   280  007E52  0E56               	movlw	86
   281  007E54                     u77:
   282  007E54  2EE8               	decfsz	wreg,f,c
   283  007E56  D7FE               	bra	u77
   284  007E58  2E0A               	decfsz	??_start^0,f,c
   285  007E5A  D7FC               	bra	u77
   286  007E5C  2E0B               	decfsz	(??_start+1)^0,f,c
   287  007E5E  D7FA               	bra	u77
   288  007E60  0012               	return		;funcret
   289  007E62                     __end_of_start:
   290                           	opt callstack 0
   291                           
   292 ;; *************** function _WriteSPI *****************
   293 ;; Defined at:
   294 ;;		line 76 in file "main.c"
   295 ;; Parameters:    Size  Location     Type
   296 ;;  Register        1    wreg     unsigned char 
   297 ;;  Data            2    2[COMRAM] PTR unsigned char 
   298 ;;		 -> a(8), 
   299 ;;  Ndatos          2    4[COMRAM] int 
   300 ;; Auto vars:     Size  Location     Type
   301 ;;  Register        1    8[COMRAM] unsigned char 
   302 ;; Return value:  Size  Location     Type
   303 ;;                  1    wreg      void 
   304 ;; Registers used:
   305 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   306 ;; Tracked objects:
   307 ;;		On entry : 0/0
   308 ;;		On exit  : 0/0
   309 ;;		Unchanged: 0/0
   310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   311 ;;      Params:         4       0       0       0       0       0       0       0       0
   312 ;;      Locals:         1       0       0       0       0       0       0       0       0
   313 ;;      Temps:          2       0       0       0       0       0       0       0       0
   314 ;;      Totals:         7       0       0       0       0       0       0       0       0
   315 ;;Total ram usage:        7 bytes
   316 ;; Hardware stack levels used:    1
   317 ;; Hardware stack levels required when called:    1
   318 ;; This function calls:
   319 ;;		_SendSPI
   320 ;; This function is called by:
   321 ;;		_start
   322 ;; This function uses a non-reentrant model
   323 ;;
   324                           
   325                           	psect	text2
   326  007EE6                     __ptext2:
   327                           	opt callstack 0
   328  007EE6                     _WriteSPI:
   329                           	opt callstack 28
   330                           
   331                           ;incstack = 0
   332                           ;WriteSPI@Register stored from wreg
   333  007EE6  6E09               	movwf	WriteSPI@Register^0,c
   334  007EE8                     
   335                           ;main.c: 77:     SendSPI(Register);
   336  007EE8  0E00               	movlw	0
   337  007EEA  6E1A               	movwf	(_i+1)^0,c
   338  007EEC  0E00               	movlw	0
   339  007EEE  6E19               	movwf	_i^0,c
   340  007EF0  EF93  F03F         	goto	l902
   341  007EF4                     l66:
   342                           
   343                           ;main.c: 78:     for(i=0; i<Nbytes; i++){
   344  007EF4  9A89               	bcf	137,5,c	;volatile
   345  007EF6                     
   346                           ;main.c: 79:         *Data = ReceivedSPI();
   347  007EF6  5009               	movf	WriteSPI@Register^0,w,c
   348  007EF8  2419               	addwf	_i^0,w,c
   349  007EFA  ECFB  F03E         	call	_SendSPI
   350  007EFE                     
   351                           ;main.c: 80:         Data++;
   352  007EFE  C003  FFD9         	movff	WriteSPI@Data,fsr2l
   353  007F02  C004  FFDA         	movff	WriteSPI@Data+1,fsr2h
   354  007F06  50DF               	movf	indf2,w,c
   355  007F08  ECFB  F03E         	call	_SendSPI
   356  007F0C                     
   357                           ;main.c: 81:     }
   358  007F0C  8A89               	bsf	137,5,c	;volatile
   359  007F0E                     
   360                           ;main.c: 82:     LATAbits.LATA5 = 1;
   361  007F0E  0E21               	movlw	33
   362  007F10  6E07               	movwf	??_WriteSPI^0,c
   363  007F12  0E76               	movlw	118
   364  007F14                     u87:
   365  007F14  2EE8               	decfsz	wreg,f,c
   366  007F16  D7FE               	bra	u87
   367  007F18  2E07               	decfsz	??_WriteSPI^0,f,c
   368  007F1A  D7FC               	bra	u87
   369  007F1C  D000               	nop2	
   370  007F1E                     
   371                           ;main.c: 83:     _delay((unsigned long)((1000)*(20000000/4000.0)));
   372  007F1E  4A03               	infsnz	WriteSPI@Data^0,f,c
   373  007F20  2A04               	incf	(WriteSPI@Data+1)^0,f,c
   374  007F22                     
   375                           ;main.c: 84: }
   376  007F22  4A19               	infsnz	_i^0,f,c
   377  007F24  2A1A               	incf	(_i+1)^0,f,c
   378  007F26                     l902:
   379  007F26  5005               	movf	WriteSPI@Ndatos^0,w,c
   380  007F28  5C19               	subwf	_i^0,w,c
   381  007F2A  501A               	movf	(_i+1)^0,w,c
   382  007F2C  0A80               	xorlw	128
   383  007F2E  6E07               	movwf	??_WriteSPI^0,c
   384  007F30  5006               	movf	(WriteSPI@Ndatos+1)^0,w,c
   385  007F32  0A80               	xorlw	128
   386  007F34  5807               	subwfb	??_WriteSPI^0,w,c
   387  007F36  A0D8               	btfss	status,0,c
   388  007F38  EFA0  F03F         	goto	u61
   389  007F3C  EFA2  F03F         	goto	u60
   390  007F40                     u61:
   391  007F40  EF7A  F03F         	goto	l66
   392  007F44                     u60:
   393  007F44                     
   394                           ;main.c: 85: 
   395  007F44  0E1A               	movlw	26
   396  007F46  6E08               	movwf	(??_WriteSPI+1)^0,c
   397  007F48  0E5E               	movlw	94
   398  007F4A  6E07               	movwf	??_WriteSPI^0,c
   399  007F4C  0E6E               	movlw	110
   400  007F4E                     u97:
   401  007F4E  2EE8               	decfsz	wreg,f,c
   402  007F50  D7FE               	bra	u97
   403  007F52  2E07               	decfsz	??_WriteSPI^0,f,c
   404  007F54  D7FC               	bra	u97
   405  007F56  2E08               	decfsz	(??_WriteSPI+1)^0,f,c
   406  007F58  D7FA               	bra	u97
   407  007F5A  D000               	nop2	
   408  007F5C  0012               	return		;funcret
   409  007F5E                     __end_of_WriteSPI:
   410                           	opt callstack 0
   411                           
   412 ;; *************** function _settings *****************
   413 ;; Defined at:
   414 ;;		line 38 in file "main.c"
   415 ;; Parameters:    Size  Location     Type
   416 ;;		None
   417 ;; Auto vars:     Size  Location     Type
   418 ;;		None
   419 ;; Return value:  Size  Location     Type
   420 ;;                  1    wreg      void 
   421 ;; Registers used:
   422 ;;		wreg, status,2, status,0, cstack
   423 ;; Tracked objects:
   424 ;;		On entry : 0/0
   425 ;;		On exit  : 0/0
   426 ;;		Unchanged: 0/0
   427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   428 ;;      Params:         0       0       0       0       0       0       0       0       0
   429 ;;      Locals:         0       0       0       0       0       0       0       0       0
   430 ;;      Temps:          0       0       0       0       0       0       0       0       0
   431 ;;      Totals:         0       0       0       0       0       0       0       0       0
   432 ;;Total ram usage:        0 bytes
   433 ;; Hardware stack levels used:    1
   434 ;; Hardware stack levels required when called:    2
   435 ;; This function calls:
   436 ;;		_CleanMAX7219
   437 ;;		_SettingsMAX7219
   438 ;; This function is called by:
   439 ;;		_main
   440 ;; This function uses a non-reentrant model
   441 ;;
   442                           
   443                           	psect	text3
   444  007E12                     __ptext3:
   445                           	opt callstack 0
   446  007E12                     _settings:
   447                           	opt callstack 28
   448  007E12                     
   449                           ;main.c: 39: 
   450  007E12  0E0F               	movlw	15
   451  007E14  6EC1               	movwf	193,c	;volatile
   452  007E16                     
   453                           ;main.c: 40: void start(void){
   454  007E16  8093               	bsf	147,0,c	;volatile
   455  007E18                     
   456                           ;main.c: 41:     WriteSPI(0x01,a,8);
   457  007E18  9293               	bcf	147,1,c	;volatile
   458  007E1A                     
   459                           ;main.c: 42:     _delay((unsigned long)((100)*(20000000/4000.0)));
   460  007E1A  9E94               	bcf	148,7,c	;volatile
   461  007E1C                     
   462                           ;main.c: 43: 
   463  007E1C  9A92               	bcf	146,5,c	;volatile
   464  007E1E                     
   465                           ;main.c: 44: }
   466  007E1E  8A89               	bsf	137,5,c	;volatile
   467                           
   468                           ;main.c: 46: void SendSPI(unsigned char Data){
   469  007E20  0E40               	movlw	64
   470  007E22  6EC7               	movwf	199,c	;volatile
   471                           
   472                           ;main.c: 47:     unsigned char buffer;
   473  007E24  0E20               	movlw	32
   474  007E26  6EC6               	movwf	198,c	;volatile
   475  007E28                     
   476                           ;main.c: 48:     buffer = SSPBUF;
   477  007E28  969E               	bcf	3998,3,c	;volatile
   478  007E2A                     
   479                           ;main.c: 50:     while(SSPIF == 0){};
   480  007E2A  ECAF  F03F         	call	_SettingsMAX7219	;wreg free
   481  007E2E                     
   482                           ;main.c: 51:     SSPIF = 0;
   483  007E2E  EC4A  F03F         	call	_CleanMAX7219	;wreg free
   484  007E32  0012               	return		;funcret
   485  007E34                     __end_of_settings:
   486                           	opt callstack 0
   487                           
   488 ;; *************** function _SettingsMAX7219 *****************
   489 ;; Defined at:
   490 ;;		line 100 in file "main.c"
   491 ;; Parameters:    Size  Location     Type
   492 ;;		None
   493 ;; Auto vars:     Size  Location     Type
   494 ;;		None
   495 ;; Return value:  Size  Location     Type
   496 ;;                  1    wreg      void 
   497 ;; Registers used:
   498 ;;		wreg, cstack
   499 ;; Tracked objects:
   500 ;;		On entry : 0/0
   501 ;;		On exit  : 0/0
   502 ;;		Unchanged: 0/0
   503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   504 ;;      Params:         0       0       0       0       0       0       0       0       0
   505 ;;      Locals:         0       0       0       0       0       0       0       0       0
   506 ;;      Temps:          1       0       0       0       0       0       0       0       0
   507 ;;      Totals:         1       0       0       0       0       0       0       0       0
   508 ;;Total ram usage:        1 bytes
   509 ;; Hardware stack levels used:    1
   510 ;; Hardware stack levels required when called:    1
   511 ;; This function calls:
   512 ;;		_SendSPI
   513 ;; This function is called by:
   514 ;;		_settings
   515 ;; This function uses a non-reentrant model
   516 ;;
   517                           
   518                           	psect	text4
   519  007F5E                     __ptext4:
   520                           	opt callstack 0
   521  007F5E                     _SettingsMAX7219:
   522                           	opt callstack 28
   523  007F5E                     
   524                           ;main.c: 101:     _delay((unsigned long)((5)*(20000000/4000.0)));
   525  007F5E  9A89               	bcf	137,5,c	;volatile
   526  007F60                     
   527                           ;main.c: 102:     LATAbits.LATA5 = 0;
   528  007F60  0E09               	movlw	9
   529  007F62  ECFB  F03E         	call	_SendSPI
   530                           
   531                           ;main.c: 103:     SendSPI(0x0C);
   532  007F66  0E00               	movlw	0
   533  007F68  ECFB  F03E         	call	_SendSPI
   534  007F6C                     
   535                           ;main.c: 104:     SendSPI(0x01);
   536  007F6C  8A89               	bsf	137,5,c	;volatile
   537  007F6E                     
   538                           ;main.c: 105:     LATAbits.LATA5 = 1;
   539  007F6E  0E21               	movlw	33
   540  007F70  6E03               	movwf	??_SettingsMAX7219^0,c
   541  007F72  0E76               	movlw	118
   542  007F74                     u107:
   543  007F74  2EE8               	decfsz	wreg,f,c
   544  007F76  D7FE               	bra	u107
   545  007F78  2E03               	decfsz	??_SettingsMAX7219^0,f,c
   546  007F7A  D7FC               	bra	u107
   547  007F7C  D000               	nop2	
   548  007F7E                     
   549                           ;main.c: 106:     _delay((unsigned long)((5)*(20000000/4000.0)));
   550  007F7E  9A89               	bcf	137,5,c	;volatile
   551  007F80                     
   552                           ;main.c: 107:     LATAbits.LATA5 = 0;
   553  007F80  0E0A               	movlw	10
   554  007F82  ECFB  F03E         	call	_SendSPI
   555  007F86                     
   556                           ;main.c: 108:     SendSPI(0x0F);
   557  007F86  0E0F               	movlw	15
   558  007F88  ECFB  F03E         	call	_SendSPI
   559  007F8C                     
   560                           ;main.c: 109:     SendSPI(0x00);
   561  007F8C  8A89               	bsf	137,5,c	;volatile
   562  007F8E                     
   563                           ;main.c: 110:     LATAbits.LATA5 = 1;
   564  007F8E  0E21               	movlw	33
   565  007F90  6E03               	movwf	??_SettingsMAX7219^0,c
   566  007F92  0E76               	movlw	118
   567  007F94                     u117:
   568  007F94  2EE8               	decfsz	wreg,f,c
   569  007F96  D7FE               	bra	u117
   570  007F98  2E03               	decfsz	??_SettingsMAX7219^0,f,c
   571  007F9A  D7FC               	bra	u117
   572  007F9C  D000               	nop2	
   573  007F9E                     
   574                           ;main.c: 111:     _delay((unsigned long)((5)*(20000000/4000.0)));
   575  007F9E  9A89               	bcf	137,5,c	;volatile
   576                           
   577                           ;main.c: 112: }
   578  007FA0  0E0B               	movlw	11
   579  007FA2  ECFB  F03E         	call	_SendSPI
   580                           
   581                           ;main.c: 113: 
   582  007FA6  0E07               	movlw	7
   583  007FA8  ECFB  F03E         	call	_SendSPI
   584  007FAC                     
   585                           ;main.c: 114: void CleanMAX7219(void){
   586  007FAC  8A89               	bsf	137,5,c	;volatile
   587  007FAE                     
   588                           ;main.c: 115:     for(i=1; i<=8; i++){
   589  007FAE  0E21               	movlw	33
   590  007FB0  6E03               	movwf	??_SettingsMAX7219^0,c
   591  007FB2  0E76               	movlw	118
   592  007FB4                     u127:
   593  007FB4  2EE8               	decfsz	wreg,f,c
   594  007FB6  D7FE               	bra	u127
   595  007FB8  2E03               	decfsz	??_SettingsMAX7219^0,f,c
   596  007FBA  D7FC               	bra	u127
   597  007FBC  D000               	nop2	
   598  007FBE                     
   599                           ;main.c: 116:         LATAbits.LATA5 = 0;
   600  007FBE  9A89               	bcf	137,5,c	;volatile
   601  007FC0                     
   602                           ;main.c: 117:         SendSPI(i);
   603  007FC0  0E0C               	movlw	12
   604  007FC2  ECFB  F03E         	call	_SendSPI
   605  007FC6                     
   606                           ;main.c: 118:         SendSPI(0);
   607  007FC6  0E01               	movlw	1
   608  007FC8  ECFB  F03E         	call	_SendSPI
   609  007FCC                     
   610                           ;main.c: 119:         LATAbits.LATA5 = 1;
   611  007FCC  8A89               	bsf	137,5,c	;volatile
   612  007FCE                     
   613                           ;main.c: 120:         _delay((unsigned long)((5)*(20000000/4000.0)));
   614  007FCE  0E21               	movlw	33
   615  007FD0  6E03               	movwf	??_SettingsMAX7219^0,c
   616  007FD2  0E76               	movlw	118
   617  007FD4                     u137:
   618  007FD4  2EE8               	decfsz	wreg,f,c
   619  007FD6  D7FE               	bra	u137
   620  007FD8  2E03               	decfsz	??_SettingsMAX7219^0,f,c
   621  007FDA  D7FC               	bra	u137
   622  007FDC  D000               	nop2	
   623  007FDE                     
   624                           ;main.c: 121:     }
   625  007FDE  9A89               	bcf	137,5,c	;volatile
   626                           
   627                           ;main.c: 122: }
   628  007FE0  0E0F               	movlw	15
   629  007FE2  ECFB  F03E         	call	_SendSPI
   630  007FE6  0E00               	movlw	0
   631  007FE8  ECFB  F03E         	call	_SendSPI
   632  007FEC  8A89               	bsf	137,5,c	;volatile
   633  007FEE  0E21               	movlw	33
   634  007FF0  6E03               	movwf	??_SettingsMAX7219^0,c
   635  007FF2  0E76               	movlw	118
   636  007FF4                     u147:
   637  007FF4  2EE8               	decfsz	wreg,f,c
   638  007FF6  D7FE               	bra	u147
   639  007FF8  2E03               	decfsz	??_SettingsMAX7219^0,f,c
   640  007FFA  D7FC               	bra	u147
   641  007FFC  D000               	nop2	
   642  007FFE  0012               	return		;funcret
   643  008000                     __end_of_SettingsMAX7219:
   644                           	opt callstack 0
   645                           
   646 ;; *************** function _CleanMAX7219 *****************
   647 ;; Defined at:
   648 ;;		line 128 in file "main.c"
   649 ;; Parameters:    Size  Location     Type
   650 ;;		None
   651 ;; Auto vars:     Size  Location     Type
   652 ;;		None
   653 ;; Return value:  Size  Location     Type
   654 ;;                  1    wreg      void 
   655 ;; Registers used:
   656 ;;		wreg, status,2, status,0, cstack
   657 ;; Tracked objects:
   658 ;;		On entry : 0/0
   659 ;;		On exit  : 0/0
   660 ;;		Unchanged: 0/0
   661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   662 ;;      Params:         0       0       0       0       0       0       0       0       0
   663 ;;      Locals:         0       0       0       0       0       0       0       0       0
   664 ;;      Temps:          1       0       0       0       0       0       0       0       0
   665 ;;      Totals:         1       0       0       0       0       0       0       0       0
   666 ;;Total ram usage:        1 bytes
   667 ;; Hardware stack levels used:    1
   668 ;; Hardware stack levels required when called:    1
   669 ;; This function calls:
   670 ;;		_SendSPI
   671 ;; This function is called by:
   672 ;;		_settings
   673 ;; This function uses a non-reentrant model
   674 ;;
   675                           
   676                           	psect	text5
   677  007E94                     __ptext5:
   678                           	opt callstack 0
   679  007E94                     _CleanMAX7219:
   680                           	opt callstack 28
   681  007E94  0E00               	movlw	0
   682  007E96  6E1A               	movwf	(_i+1)^0,c
   683  007E98  0E01               	movlw	1
   684  007E9A  6E19               	movwf	_i^0,c
   685  007E9C                     l804:
   686  007E9C  BE1A               	btfsc	(_i+1)^0,7,c
   687  007E9E  EF5A  F03F         	goto	u21
   688  007EA2  501A               	movf	(_i+1)^0,w,c
   689  007EA4  E109               	bnz	u20
   690  007EA6  0E09               	movlw	9
   691  007EA8  5C19               	subwf	_i^0,w,c
   692  007EAA  A0D8               	btfss	status,0,c
   693  007EAC  EF5A  F03F         	goto	u21
   694  007EB0  EF5C  F03F         	goto	u20
   695  007EB4                     u21:
   696  007EB4  EF5E  F03F         	goto	l80
   697  007EB8                     u20:
   698  007EB8  EF72  F03F         	goto	l82
   699  007EBC                     l80:
   700  007EBC  9A89               	bcf	137,5,c	;volatile
   701  007EBE  5019               	movf	_i^0,w,c
   702  007EC0  ECFB  F03E         	call	_SendSPI
   703  007EC4  0E00               	movlw	0
   704  007EC6  ECFB  F03E         	call	_SendSPI
   705  007ECA  8A89               	bsf	137,5,c	;volatile
   706  007ECC  0E21               	movlw	33
   707  007ECE  6E03               	movwf	??_CleanMAX7219^0,c
   708  007ED0  0E76               	movlw	118
   709  007ED2                     u157:
   710  007ED2  2EE8               	decfsz	wreg,f,c
   711  007ED4  D7FE               	bra	u157
   712  007ED6  2E03               	decfsz	??_CleanMAX7219^0,f,c
   713  007ED8  D7FC               	bra	u157
   714  007EDA  D000               	nop2	
   715  007EDC  4A19               	infsnz	_i^0,f,c
   716  007EDE  2A1A               	incf	(_i+1)^0,f,c
   717  007EE0  EF4E  F03F         	goto	l804
   718  007EE4                     l82:
   719  007EE4  0012               	return		;funcret
   720  007EE6                     __end_of_CleanMAX7219:
   721                           	opt callstack 0
   722                           
   723 ;; *************** function _SendSPI *****************
   724 ;; Defined at:
   725 ;;		line 60 in file "main.c"
   726 ;; Parameters:    Size  Location     Type
   727 ;;  Data            1    wreg     unsigned char 
   728 ;; Auto vars:     Size  Location     Type
   729 ;;  Data            1    1[COMRAM] unsigned char 
   730 ;;  buffer          1    0        unsigned char 
   731 ;; Return value:  Size  Location     Type
   732 ;;                  1    wreg      void 
   733 ;; Registers used:
   734 ;;		wreg
   735 ;; Tracked objects:
   736 ;;		On entry : 0/0
   737 ;;		On exit  : 0/0
   738 ;;		Unchanged: 0/0
   739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   740 ;;      Params:         0       0       0       0       0       0       0       0       0
   741 ;;      Locals:         2       0       0       0       0       0       0       0       0
   742 ;;      Temps:          0       0       0       0       0       0       0       0       0
   743 ;;      Totals:         2       0       0       0       0       0       0       0       0
   744 ;;Total ram usage:        2 bytes
   745 ;; Hardware stack levels used:    1
   746 ;; This function calls:
   747 ;;		Nothing
   748 ;; This function is called by:
   749 ;;		_WriteSPI
   750 ;;		_SettingsMAX7219
   751 ;;		_CleanMAX7219
   752 ;;		_ReadSPI
   753 ;; This function uses a non-reentrant model
   754 ;;
   755                           
   756                           	psect	text6
   757  007DF6                     __ptext6:
   758                           	opt callstack 0
   759  007DF6                     _SendSPI:
   760                           	opt callstack 28
   761                           
   762                           ;incstack = 0
   763                           ;SendSPI@Data stored from wreg
   764  007DF6  6E02               	movwf	SendSPI@Data^0,c
   765  007DF8  50C9               	movf	201,w,c	;volatile
   766  007DFA                     
   767                           ;main.c: 63:     for(i=0; i<Ndatos; i++){
   768  007DFA  C002  FFC9         	movff	SendSPI@Data,4041	;volatile
   769  007DFE                     l53:
   770  007DFE  A69E               	btfss	3998,3,c	;volatile
   771  007E00  EF04  F03F         	goto	u11
   772  007E04  EF06  F03F         	goto	u10
   773  007E08                     u11:
   774  007E08  EFFF  F03E         	goto	l53
   775  007E0C                     u10:
   776  007E0C                     
   777                           ;main.c: 65:         SendSPI(Register+i);
   778  007E0C  969E               	bcf	3998,3,c	;volatile
   779  007E0E  50C9               	movf	201,w,c	;volatile
   780  007E10  0012               	return		;funcret
   781  007E12                     __end_of_SendSPI:
   782                           	opt callstack 0
   783  0000                     
   784                           	psect	rparam
   785  0000                     tosu	equ	0xFFF
   786                           tosh	equ	0xFFE
   787                           tosl	equ	0xFFD
   788                           stkptr	equ	0xFFC
   789                           pclatu	equ	0xFFB
   790                           pclath	equ	0xFFA
   791                           pcl	equ	0xFF9
   792                           tblptru	equ	0xFF8
   793                           tblptrh	equ	0xFF7
   794                           tblptrl	equ	0xFF6
   795                           tablat	equ	0xFF5
   796                           prodh	equ	0xFF4
   797                           prodl	equ	0xFF3
   798                           indf0	equ	0xFEF
   799                           postinc0	equ	0xFEE
   800                           postdec0	equ	0xFED
   801                           preinc0	equ	0xFEC
   802                           plusw0	equ	0xFEB
   803                           fsr0h	equ	0xFEA
   804                           fsr0l	equ	0xFE9
   805                           wreg	equ	0xFE8
   806                           indf1	equ	0xFE7
   807                           postinc1	equ	0xFE6
   808                           postdec1	equ	0xFE5
   809                           preinc1	equ	0xFE4
   810                           plusw1	equ	0xFE3
   811                           fsr1h	equ	0xFE2
   812                           fsr1l	equ	0xFE1
   813                           bsr	equ	0xFE0
   814                           indf2	equ	0xFDF
   815                           postinc2	equ	0xFDE
   816                           postdec2	equ	0xFDD
   817                           preinc2	equ	0xFDC
   818                           plusw2	equ	0xFDB
   819                           fsr2h	equ	0xFDA
   820                           fsr2l	equ	0xFD9
   821                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        8
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     11      26
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    WriteSPI@Data	PTR unsigned char  size(2) Largest target is 8
		 -> a(COMRAM[8]), 


Critical Paths under _main in COMRAM

    _main->_start
    _start->_WriteSPI
    _WriteSPI->_SendSPI
    _settings->_CleanMAX7219
    _settings->_SettingsMAX7219
    _SettingsMAX7219->_SendSPI
    _CleanMAX7219->_SendSPI

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     264
                           _settings
                              _start
 ---------------------------------------------------------------------------------
 (1) _start                                                2     2      0     234
                                              9 COMRAM     2     2      0
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (2) _WriteSPI                                             7     3      4     234
                                              2 COMRAM     7     3      4
                            _SendSPI
 ---------------------------------------------------------------------------------
 (1) _settings                                             0     0      0      30
                       _CleanMAX7219
                    _SettingsMAX7219
 ---------------------------------------------------------------------------------
 (2) _SettingsMAX7219                                      1     1      0      15
                                              2 COMRAM     1     1      0
                            _SendSPI
 ---------------------------------------------------------------------------------
 (2) _CleanMAX7219                                         1     1      0      15
                                              2 COMRAM     1     1      0
                            _SendSPI
 ---------------------------------------------------------------------------------
 (3) _SendSPI                                              2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _settings
     _CleanMAX7219
       _SendSPI
     _SettingsMAX7219
       _SendSPI
   _start
     _WriteSPI
       _SendSPI

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      B      1A       1       27.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1A      20        0.0%
DATA                 0      0      1A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Wed Jan 22 14:20:44 2020

                       _a 000C                         _i 0019                        l50 7E60  
                      l53 7DFE                        l55 7E0C                        l47 7E32  
                      l56 7E10                        l80 7EBC                        l82 7EE4  
                      l66 7EF4                        l68 7F5C                        l77 7FFE  
                      u10 7E0C                        u11 7E08                        u20 7EB8  
                      u21 7EB4                        u60 7F44                        u61 7F40  
                      u77 7E54                        u87 7F14                        u97 7F4E  
                     l800 7FEE                       l810 7EC4                       l802 7E94  
                     l812 7ECA                       l804 7E9C                       l900 7F22  
                     l814 7ECC                       l902 7F26                       l910 7DE6  
                     l760 7DFA                       l816 7EDC                       l808 7EBE  
                     l840 7E16                       l904 7F44                       l912 7DEA  
                     l770 7F7E                       l762 7F5E                       l850 7E28  
                     l842 7E18                       l906 7E34                       l780 7F9E  
                     l772 7F80                       l764 7F60                       l852 7E2A  
                     l844 7E1A                       l908 7E4A                       l758 7DF8  
                     l790 7FC6                       l782 7FAC                       l774 7F86  
                     l766 7F6C                       l854 7E2E                       l846 7E1C  
                     l838 7E12                       l792 7FCC                       l784 7FAE  
                     l776 7F8C                       l768 7F6E                       l848 7E1E  
                     l794 7FCE                       l786 7FBE                       l778 7F8E  
                     l890 7EF6                       l796 7FDE                       l788 7FC0  
                     l892 7EFE                       l798 7FEC                       l894 7F0C  
                     l896 7F0E                       l888 7EE8                       l898 7F1E  
                     u107 7F74                       u117 7F94                       u127 7FB4  
                     u137 7FD4                       u147 7FF4                       u157 7ED2  
                     wreg 000FE8              __CFG_FOSC$HS 000000              __CFG_LVP$OFF 000000  
            __CFG_WDT$OFF 000000                      _main 7DE6                      _byte 0014  
                    fsr2h 000FDA                      indf2 000FDF                      fsr1l 000FE1  
                    fsr2l 000FD9   __end_of_SettingsMAX7219 8000                      start 0000  
            ___param_bank 000000           __end_of_SendSPI 7E12                     ?_main 0001  
                   _SSPIF 007CF3            WriteSPI@Ndatos 0005                     _start 7E34  
                   tablat 000FF5                     status 000FD8     __size_of_CleanMAX7219 0052  
         __initialization 7E62              __end_of_main 7DF6                    ??_main 000C  
           __activetblptr 000000                    _ADCON1 000FC1                    ?_start 0001  
        __end_of_WriteSPI 7F5E              _CleanMAX7219 7E94                    _SSPBUF 000FC9  
        ?_SettingsMAX7219 0001                 ??_SendSPI 0001               SendSPI@Data 0002  
                  clear_0 7E88              __pdataCOMRAM 000C          __end_of_settings 7E34  
                  tblptrh 000FF7                    tblptrl 000FF6                    tblptru 000FF8  
              __accesstop 0060   __end_of__initialization 7E8E             ___rparam_used 000001  
          __pcstackCOMRAM 0001              WriteSPI@Data 0003             __end_of_start 7E62  
                 ??_start 000A                 ?_WriteSPI 0003                   _SSPCON1 000FC6  
                 _SSPSTAT 000FC7                   _SendSPI 7DF6                   __Hparam 0000  
                 __Lparam 0000                 ?_settings 0001                   __pcinit 7E62  
                 __ramtop 0800                ??_WriteSPI 0007                   __ptext0 7DE6  
                 __ptext1 7E34                   __ptext2 7EE6                   __ptext3 7E12  
                 __ptext4 7F5E                   __ptext5 7E94                   __ptext6 7DF6  
        WriteSPI@Register 0009      end_of_initialization 7E8E                   postdec1 000FE5  
              ??_settings 0004                   postinc0 000FEE                 _TRISAbits 000F92  
               _TRISBbits 000F93                 _TRISCbits 000F94  __size_of_SettingsMAX7219 00A2  
           __pidataCOMRAM 7DDE       start_initialization 7E62         __size_of_WriteSPI 0078  
             __pbssCOMRAM 0014                  ?_SendSPI 0001         __size_of_settings 0022  
       ??_SettingsMAX7219 0003            __size_of_start 002E             ?_CleanMAX7219 0001  
                _LATAbits 000F89            ??_CleanMAX7219 0003                 copy_data0 7E76  
                __Hrparam 0000          __size_of_SendSPI 001C                  __Lrparam 0000  
                _WriteSPI 7EE6             __size_of_main 0010                  _settings 7E12  
         _SettingsMAX7219 7F5E      __end_of_CleanMAX7219 7EE6  
